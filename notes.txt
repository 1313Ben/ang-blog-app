ng serve --port 4401 // run angular app on port 4401
ng g c post // creates a component post and related files to it.

Sharing data between components:
1. Parent to child component via @Input decorator
2. Child to parent component via @Output decorator or via @ViewChild decorator
3. Child to Parent when there is Event, using the @Output decorator and event Emitter

Sharing data using @Output & Event Emitter:
This approach is ideal when we want to share data changes thatt occur on things like button clicks,
form entries, and other user events.

HTML DOM Style Object
https://www.w3schools.com/jsref/dom_obj_style.asp

One-Way data binding:
compontent to view (HTML) // can only bind data component to view // uni directional
# String interpolation - {{title}}
# Property binding - [src]
# Class binding - [class.text-red]
# Style binding - [style.backgroundColor]

Two-Way data binding:
component to view / view to component // bi-directional
# two-way binding - [(ngModel)]

Directive:
Directives are components without a view or with a view.
can manipulate the DOM Object.
can adding html elements removing html elements from DOM dynamically

Types of directives:
Component directive (which is with a template view)
Structural directive (which can change the Dom layout by adding and removing DOM elements, 
with leading * symbol,  *ngIf, *ngSwitchCase, *ngFor)
Atttribute directive (which can change the appearance or behaviour of an element, component, or another directive
ngStyle, ngClass, ..)
Custom directive (which can create our own custom directive from scratch)

ngFor: use it to render an array inside the view

ngStyle: when defining a ngStyle condition we have to define the else part as well, otherwise we will
get compile errors.

pipes: are used to transforming data into a particular format
inbuilt-pipes: uppercase, lowercase, decimal/number, currency, date, json, percent, slice